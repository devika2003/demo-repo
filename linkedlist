#include <stdio.h>
#include<stdlib.h>
struct node{
    int data;
    struct node *next ;

};
void traversal(struct node *ptr);
struct node* insertfirst(struct node *head, int data);
struct node* insertatindex(struct node *head, int data, int index);
struct node* insertatend(struct node *head, int data);
struct node* insertatnode(struct node *head, int data, struct node* prenode);


int main(){
    struct node *head;
    struct node *second;
    struct node *third;
    struct node *fourth;

    head=(struct node *)malloc(sizeof(struct node));
    second=(struct node *)malloc(sizeof(struct node));
    third=(struct node *)malloc(sizeof(struct node));
    fourth=(struct node *)malloc(sizeof(struct node));

    head->data=1;
    head->next=second;
    second->data=6;
    second->next=third;
    third->data=4;
    third->next=fourth;
    fourth->data=8;
    fourth->next=NULL;
    traversal(head);
    head=insertatend(head,5);
    head=insertatindex(head,2,2);
    head= insertfirst(head,9);
    head= insertatnode(head,7,third);
   traversal(head);
    return 0;

}
void traversal(struct node *ptr){
    while(ptr!=NULL){
        printf("element= %d\n",ptr->data);
        ptr=ptr->next;

    }
    printf("\n");


}
struct node* insertfirst(struct node *head,int data){
    struct node* ptr=(struct node *)malloc(sizeof(struct node));
    ptr->data=data;
    ptr->next=head;
    return ptr;


}
struct node* insertatindex(struct node *head,int data,int index){
    struct node* ptr=(struct node *)malloc(sizeof(struct node));
    struct node* p=head;
    int i=0;
    while(i!=index-1){
        p=p->next;
        i++;

    }
    ptr->data=data;
    ptr->next=p->next;
    p->next=ptr;
    return(head);

}
struct node* insertatend(struct node *head,int data){
    struct node* ptr=(struct node *)malloc(sizeof(struct node));
    struct node* p=head;
    ptr->data=data;
    while(p->next!=NULL){
        p=p->next;

    }
    p->next=ptr;
    ptr->next=NULL;
    return(head);
}
struct node* insertatnode(struct node *head,int data,struct node* prenode){
    struct node* ptr=(struct node *)malloc(sizeof(struct node));
    ptr->data=data;
    ptr->next=prenode->next;
    prenode->next=ptr;
    return head;
}


