#include <stdio.h>
#include<stdlib.h>
struct node{
    int data;
    struct node *next ;

};

struct node *f=NULL,*r=NULL;
void enqueue(int val){
    struct node* n=(struct node *)malloc(sizeof(struct node));
    if(n==NULL){
        printf("queue is full");
    }
    else {
        n->data=val;
        n->next=NULL;
        if(f==NULL){
            f=r=n;
        }
        else{
            r->next=n;
            r=n;

        }
}}
int dequeue(){
    int val=-1;
     struct node* ptr=f;
    if(f==NULL){
        printf("queue is empty");
    }
    else{
        f=f->next;
        val=ptr->data;
        free(ptr);}
        return val;
    }

    void traversal(struct node *ptr){
    while(ptr!=NULL){
        printf("element= %d\n",ptr->data);
        ptr=ptr->next;

    }
    printf("\n");


}
int main(){



int choice, val;

    do{
        printf("\n1. Enqueue\n");
        printf("2. Dequeue\n");
        printf("3. Display\n");
        printf("4. Exit\n");

        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the element to enqueue: ");
                scanf("%d", &val);
                enqueue(val);
                break;
            case 2:
              val= dequeue();
                if (val != -1) {
                    printf("Dequeued element: %d\n", val);
                }
                break;
            case 3:
                traversal(f);
                break;
            case 4:
                // Free the remaining nodes before exiting
                // while (f != NULL) {
                //     struct node* temp = f;
                //     f = f->next;
                //     free(temp);
                // }
                exit(0);
            default:
                printf("Invalid choice. Please enter a valid option.\n");
        }
        }while(1);
         

    return 0;
}
